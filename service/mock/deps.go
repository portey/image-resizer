// Code generated by MockGen. DO NOT EDIT.
// Source: service/service.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	model "github.com/portey/image-resizer/model"
	io "io"
	reflect "reflect"
)

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockRepository) Get(ctx context.Context, id string) (*model.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*model.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockRepositoryMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRepository)(nil).Get), ctx, id)
}

// List mocks base method
func (m *MockRepository) List(ctx context.Context, limit, offset int) ([]*model.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, limit, offset)
	ret0, _ := ret[0].([]*model.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockRepositoryMockRecorder) List(ctx, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockRepository)(nil).List), ctx, limit, offset)
}

// Save mocks base method
func (m *MockRepository) Save(ctx context.Context, version int, image model.Image) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, version, image)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockRepositoryMockRecorder) Save(ctx, version, image interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockRepository)(nil).Save), ctx, version, image)
}

// MockResizer is a mock of Resizer interface
type MockResizer struct {
	ctrl     *gomock.Controller
	recorder *MockResizerMockRecorder
}

// MockResizerMockRecorder is the mock recorder for MockResizer
type MockResizerMockRecorder struct {
	mock *MockResizer
}

// NewMockResizer creates a new mock instance
func NewMockResizer(ctrl *gomock.Controller) *MockResizer {
	mock := &MockResizer{ctrl: ctrl}
	mock.recorder = &MockResizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockResizer) EXPECT() *MockResizerMockRecorder {
	return m.recorder
}

// Resize mocks base method
func (m *MockResizer) Resize(ctx context.Context, data io.Reader, output io.Writer, width, height int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Resize", ctx, data, output, width, height)
	ret0, _ := ret[0].(error)
	return ret0
}

// Resize indicates an expected call of Resize
func (mr *MockResizerMockRecorder) Resize(ctx, data, output, width, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resize", reflect.TypeOf((*MockResizer)(nil).Resize), ctx, data, output, width, height)
}

// MockStorage is a mock of Storage interface
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// Read mocks base method
func (m *MockStorage) Read(ctx context.Context, path string) (io.Reader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", ctx, path)
	ret0, _ := ret[0].(io.Reader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read
func (mr *MockStorageMockRecorder) Read(ctx, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockStorage)(nil).Read), ctx, path)
}

// Upload mocks base method
func (m *MockStorage) Upload(ctx context.Context, data io.Reader) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upload", ctx, data)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Upload indicates an expected call of Upload
func (mr *MockStorageMockRecorder) Upload(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upload", reflect.TypeOf((*MockStorage)(nil).Upload), ctx, data)
}

// UploadResized mocks base method
func (m *MockStorage) UploadResized(ctx context.Context, data io.Reader, width, height int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadResized", ctx, data, width, height)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadResized indicates an expected call of UploadResized
func (mr *MockStorageMockRecorder) UploadResized(ctx, data, width, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadResized", reflect.TypeOf((*MockStorage)(nil).UploadResized), ctx, data, width, height)
}
